== Configuring

JJava kernel behavior can be configured via <<environment-vars,environment variables>>. Here is
an example on Windows using `cmd`:
```
set JJAVA_JVM_OPTS=-Xmx8192m
jupyter lab
```

And the same example on Linux or MacOS:
```bash
export JJAVA_JVM_OPTS=-Xmx8192m
jupyter lab

# alternatively, store it in ".bashrc" so that the
# variable is always set implicitly
# echo 'export JJAVA_JVM_OPTS=-Xmx8192m' >> ~/.bashrc
```

Sometimes you don't fully control the startup environment. If that's the case, you may store the same variables
in the `kernel.json` file that is a part of the JJava installation. To locate this file, run `jupyter kernelspec list`
command. `kernel.json` should be located in the directory corresponding to the "java" kernel as listed by this command. In the
file, look for the `"env"` section, and set any number of variables. E.g:

```json
{
    "argv": [
        "java",
        "-jar",
        "{resource_dir}/jjava-launcher.jar",
        "{resource_dir}/jjava.jar",
        "{connection_file}"
    ],
    "display_name": "Java (jjava)",
    "language": "java",
    "interrupt_mode": "message",
    "env": {
      "JJAVA_JVM_OPTS" : "-Xmx8192m"
    },
    "metadata": {
    }
}
```

NOTE: If you store your variables in `kernel.json`, be aware that they will be wiped out on subsequent kernel reinstalls.
So you will have to do it again after every kernel upgrade.

[#environment-vars]
=== Environment Variables

[width="100%",cols="8%,1%,91%",options="header",]
|===
|Environment variable |Default |Description
|`JJAVA_COMPILER_OPTS` |`""` |A space delimited list of
command line options that would be passed to the `javac` command when
compiling a project. For example `-parameters` to enable retaining
parameter names for reflection.

|`JJAVA_TIMEOUT` |`"-1"` |A duration specifying a timeout (in
milliseconds by default) for a _single top level statement_. If less
than `1` then there is no timeout. If desired a time may be specified
with a
https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/TimeUnit.html[`TimeUnit`]
may be given following the duration number (ex `"30 SECONDS"`).

|`JJAVA_CLASSPATH` |`""` |A file path separator delimited list of classpath entries that should be available to the
user code. No matter what OS you are on, this should use forward slash `/` as the file separator. Also, each path may
actually be a link:#simple-glob-syntax[simple glob].

|`JJAVA_STARTUP_SCRIPTS_PATH` |`""` |A file path separator delimited list of `.jshell` scripts to run on startup.
No matter what OS you are on, this should use forward slash `/` as the file separator. Also, each path may actually be
a link:#simple-glob-syntax[simple glob].

|`JJAVA_STARTUP_SCRIPT` |`""` |A block of Java code to run when the kernel starts up. This may be something like
`'import my.utils.*;'` to set up some default imports, or any other relevant code.

|`JJAVA_JVM_OPTS` |`""` |A space-delimited list of command line options that would be passed to the `java` command
running the kernel.

|`JJAVA_LOAD_EXTENSIONS` |`"1"` |Option that controls link:#jupyter-aware-java-libs[autoloading Kernel extensions feature].
If you do not want third-party libraries to load anything implicitly you could turn it off by `export JJAVA_LOAD_EXTENSIONS=0`
|===

[#simple-glob-syntax]
=== Glob Syntax

Variables that support this glob syntax may reference a set of files with
a single path-like string. Basic glob queries are supported including:

* `*` to match 0 or more characters up to the next path boundary `/`
* `?` to match a single character
* A path ending in `/` implicitly adds a `*` to match all files in the
resolved directory

Any relative paths are resolved from the notebook serverâ€™s working
directory. For example the glob `*.jar` will match all jars is the
directory that the `jupyter notebook` command was run.

NOTE: users on any OS should use `/` as a path separator.
