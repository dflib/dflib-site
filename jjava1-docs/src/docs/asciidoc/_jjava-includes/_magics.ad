[#magics]
== Magics

"Magics" is an IPython concept adopted by JJava kernel. There are "line" and "cell" magics, both being syntactic sugar
for invoking special kernel functions.

=== Line magics

Line magics are single-line function calls, with magic name prefixed with `%`, and arguments separated by spaces:

[source,text]
----
%mavenRepo snapshots https://s01.oss.sonatype.org/content/repositories/snapshots/

%maven org.dflib:dflib-jupyter:1.2.0

List<String> addedJars = %jars C:/all/my/*.jar
----

=== Cell magics
Cell magics are function calls, with magic name prefixed with `%%` and using the body of the entire cell as the last
argument:

[source,xml]
----
%%loadFromPOM
<repository>
  <id>snapshots</id>
  <url>https://s01.oss.sonatype.org/content/repositories/snapshots/</url>
</repository>

<dependency>
  <groupId>org.dflib</groupId>
  <artifactId>dflib-jupyter</artifactId>
  <version>2.0.0-SNAPSHOT</version>
</dependency>
----

=== JJava Magics

JJava provides a number of magics that help with notebook dependency management. Some allow to add local jars, others
allow to reference dependencies from local and remote Maven repositories:

==== `jars` (line)

Adds jars to the notebook classpath. Arguments are glob paths to jars on the local file system. If a glob matches a
directory all files in that directory will be added.

==== `classpath` (line)

Adds entries to the notebook classpath. Arguments are glob paths to entries on the local file system. This includes
directories or jars.

[#addmavendependencies]
==== `maven`, aka `addMavenDependencies`, `addMavenDependency` (line)

Adds maven artifacts to the notebook classpath. All transitive dependencies are also added to the classpath. Arguments
are in the form of "dependency coordinates" like `groupId:artifactId:[packagingType:[classifier]]:version`

[#addmavenrepo]
==== `mavenRepo`, aka `addMavenRepo` (line)

Add a maven repository to search for the benefit of link:#addmavendependencies[`maven`] magic. Takes two arguments:
`<repo_id> <repo_url>`.

==== `loadFromPOM` (either line or cell)

Loads any dependencies specified in a POM. It ignores repositories added with link:#addmavenrepo[addMavenRepo] as the
POM would likely specify its own. This cell magic is designed to make it very simple to copy and paste from
any READMEs specifying maven POM fragments to use in depending on an artifact (including repositories other than central).

Line magic arguments:

* path to local POM file
* list of scope types to filter the dependencies by. Defaults to `compile`, `runtime`, `system`, and `import` if not supplied.

Cell magic arguments:

* _varargs_ list of scope types to filter the dependencies by. Defaults to `compile`, `runtime`, `system`, and `import` if not supplied.
* body: A _partial_ POM literal.

If the body is an XML `<project>` tag, then the body is used as a POM without modification. Otherwise, the magic
attempts to build a POM based on the XML fragments it gets. `<modelVersion>`, `<groupId>`, `<artifactId>`, and `<version>`
are given default values if not supplied. All children of `<dependencies>` and `<repositories>` are collected
along with any loose `<dependency>` and `repository` tags.

E.g., to add a dependency not in central simply add a valid `<repository>` and `<dependency>` and the magic will take
care of putting it together into a POM:
[source,xml]
----
%%loadFromPOM
<repository>
  <id>snapshots</id>
  <url>https://s01.oss.sonatype.org/content/repositories/snapshots/</url>
</repository>

<dependency>
  <groupId>org.dflib</groupId>
  <artifactId>dflib-jupyter</artifactId>
  <version>2.0.0-SNAPSHOT</version>
</dependency>
----
