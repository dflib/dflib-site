[#sorting]
== Sorting

You can sort values in `Series`, and sort rows in `DataFrames`. As is the case everywhere else in DFLib, sorting does
not alter the original object, and instead creates a new instance of either Series or DataFrame.

First let's look at sorting Series...

=== Sort Series
Series provides a `sort` method to sort its data using a <<sorter,sorter>> built from QL:
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/SortingTest.java[tags=sortSeries_Sorter]
----
The result is a new Series with sorted data:
----
123
12
1
----

Alternatively the same can be achieved using a Comparator:
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/SortingTest.java[tags=sortSeries]
----
The next example shows how to sort Series in the "natural" order (alphabetically for Strings):
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/SortingTest.java[tags=sortSeries_Natural]
----

----
a
c
d
----

Series of primitives have methods to sort values in the natural order without an explicit sorter or comparator:
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/SortingTest.java[tags=sortSeries_Long]
----

----
                  0
                 15
9223372036854775807
----

Additionally, `IntSeries` has an optimized method to sort ints with a custom `IntComparator`.

Next we'll check how to sort a DataFrame.

=== Sort DataFrame

Rows in a DataFrame can be sorted with one or more <<sorter,sorters>>.

NOTE: Just like in other places where a Sorter might be
used, there is an assumption that the Sorter expression produces values that are either Java primitives or are
compatible with `java.lang.Comparable` (i.e., Strings, numbers, etc).

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/SortingTest.java[tags=sortDataFrame_Sorter]
----
----
first   last      middle
------- --------- ------
Juliana Walewski  null
Jerry   Albert    null
Jerry   Cosin     M
Joan    O'Hara    J
----

Alternatively sorting can be done by a single column name or an array of columns. The assumption is the same as above
- values in columns used for sorting must be either Java primitive or implement `java.lang.Comparable`.
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/SortingTest.java[tags=sortDataFrameComparableColumn]
----
<1> The first argument is the column name (can also be column integer index), the second - a boolean indicating sort
direction (`true` for ascending, `false` - for descending order).

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/SortingTest.java[tags=sortDataFrameComparableColumns]
----


