[#bin_data_sources]
== Binary Data Sources

To uniformly deal with all possible data sources independent of format or location (be it file system, classpath,
a remote web service, etc.), DFLib provides is a `ByteSource` interface representing a single binary "resource". Most
loaders from the previous chapters can take a `ByteSource` as an argument to their `load(..)` method.

NOTE: JDBC loader doesn't support `ByteSource`, because JDBC `ResultSet` is cannot be represented as a stream of bytes

The following `ByteSource` types are available out of the box:

=== Byte Array ByteSource

The simplest ByteSource is a wrapper around a `byte[]`:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ByteSourceTest.java[tags=byteArray]
----
<1> Create a `ByteSource` from a `byte[]`
<2> To make a `DataFrame`, use an appropriate loader matching the format of the data stored in the `byte[]`

=== URL ByteSource
Lots of data exists on the web that can be accessed via URLs. There is a `ByteSource` for that. Of course the URL
must be publicly accessible:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ByteSourceTest.java[tags=url]
----

Also, the JVM can expose application resources as URLs, and the same API can be used to create a `ByteSource`:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ByteSourceTest.java[tags=resourceUrl]
----

=== HTTP ByteSource

While the `ByteSource.ofUrl(..)` example above works well for simple public URLs, DFLib provides a more advanced HTTP connector to
access web resources. It allows sending authorization (or any other) headers and building URLs from parts incrementally:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ByteSourceTest.java[tags=http]
----

NOTE: The `Http` connector is immutable. Each builder method above produces an altered _copy_ of the original connector.
This means you can reuse a partially built connector to produce multiple resource-specific connectors.

== Data Source Collections

While `ByteSource` represents a single resource, `ByteSources` is a collection of such resources.
Filesystem folders, zip archives, S3 buckets, etc. are all examples of such collections. Each `ByteSources` implementation provides
a unique way to navigate and filter a collection, and `ByteSources` common API allows DFLib loaders to access
individual resources without knowing the actual storage and access details.

Most loaders support reading the entire collection as a map of DataFrames. The following `ByteSources` are available
out of the box:

=== Filesystem Folders

`FSFolder` is used to create `ByteSources` for filesystem folders:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ByteSourcesTest.java[tags=fsFolder]
----

`ByteSource` can then be passed to a loader to read all folder files at once:
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ByteSourcesTest.java[tags=fsFolderProcess]
----

`FSFolder` can help to locate specific files in a folder. E.g., if we'd like to include subfolder contents in the
`ByteSources` as well as ensure that only files with `.csv` extension are loaded, we might do the following:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ByteSourcesTest.java[tags=fsFolderFiltered]
----

Additionally, `FSFolder` provides methods to explore folder contents, navigate subfolders, etc.

=== Zip Archives

A zip archive is also a collection of entries that can be represented as a `ByteSources`:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ByteSourcesTest.java[tags=zip]
----

`Zip` instance also provides methods to explore the contents of an archive.