[#expression_lang]
== Expression Language

DFLib expression language is a special syntax that the library can parse to an `Exp` object. Parsing is done
with the `Exp.parseExp(String)` method, though most of the APIs take expression Strings directly, parsing them internally.

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ExpLangTest.java[tags=parseExp]
----

The syntax consists of column references, literals, operators, and functions. Let's take a look at the individual parts of the syntax...

=== Columns

NOTE: A commented out String below each expression in the following examples is an equivalent created via the Java API.

Expressions can reference `DataFrame` column names either by name or by position. If a column name is compatible with
the rules for Java identifiers (and doesn't conflict with syntax keywords like `true`, `false`, `null`), the column can
be specified as an unquoted string:
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ExpLangTest.java[tags=column]
----

If it has other characters (e.g. spaces, special chars, or it starts with a number), it should be enclosed in backtick
quotes:
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ExpLangTest.java[tags=columnBackticks]
----

If the name itself contains backticks, each one of them should be escaped with another backtick:
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ExpLangTest.java[tags=columnBackticksEscape]
----

Columns can also be referred by their position in the `DataFrame` using the `col(..)` function:
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ExpLangTest.java[tags=columnByIndex]
----

=== String Literals

Unlike columns, constant String values are always quoted using single quotes:
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ExpLangTest.java[tags=strVal]
----

If a String contains single quotes, each one should be escaped with another single quote:
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ExpLangTest.java[tags=strValEscape]
----

=== Numeric Literals
Numeric values are just unquoted numbers (mostly) following the Java syntax for decimals (and hexadecimals):
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ExpLangTest.java[tags=intVal]
----

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ExpLangTest.java[tags=intValNegative]
----

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ExpLangTest.java[tags=floatVal]
----

The expression parser tries to guess the type of the number automatically, but the user can control the type explicitly
by providing a 1-letter suffix following the numeric constant part:

* `i` - parses the number as an `int`
* `l` - parses the number as a `long`
* `h` - parses the number as a `BigInteger`
* `f` - parses the number as a `float`
* `d` - parses the number as a `double`
* `m` - parses the number as a `BigDecimal`

These codes are case-insensitive (both upper and lower cases are valid). Most have the same meaning as in Java
(`l`, `f`, `d`), but some are unique to DFLib, namely `i`, `h`, `m`:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ExpLangTest.java[tags=decimalVal]
----

=== Boolean Literals

Lowercase unquoted `true` and `false` strings are recognized as the corresponding boolean constants.

=== Null literal

Lowercase unquoted `null` string is recognized as a null constant.

=== Operators

The following operators are supported, in the order of declining precedence:

* `(  )` - parenthesis has the highest precedence during evaluation
* `not`
* `*`, `/`, `%`
* `+`, `-`
* `<`, `>`, `\<=`, `>=`
* `=`, `!=`
* `and`
* `or`

This order follows the rules of the Java language and should be intuitive to Java programmers. If multiple
operators have the same precedence, they will be evaluated left to right.

=== Functions
All operations that are not on the operator list above are implemented as functions in the form of `fname(arg1,arg2,...)`.
Arguments to functions can be other expressions (including column references and literals). Out-of-the-box, the following
functions are supported:

==== Type-Setting Functions
These functions specify the type of another expression if it is not clear from the context. A specific type may be
required by the expression grammar to figure out how to perform certain operations. E.g.,

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ExpLangTest.java[tags=typeSetToLong]
----

Here, the `long(..)` function takes a column, but it can take any other expression as well. These functions don't do
data transformation, so if during evaluation the values passed to the function are not `Long` or `long` (or null),
an exception will be thrown. The available functions are:

* `bigint(..)`
* `bool(..)`
* `date(..)`
* `dateTime(..)`
* `decimal(..)`
* `double(..)`
* `float(..)`
* `int(..)`
* `long(..)`
* `offsetDateTime(..)`

NOTE: Our goal is to greatly reduce the need for explicit type-setting functions, guessing the correct type from the
expression itself. This area will be improving in the future releases.

==== Type-Casting Functions
Type-casting functions are similar to type-setting, but they would actually attempt to transform unknown column data
to the requested type:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/ExpLangTest.java[tags=typeCastToLong]
----
They closely mirror the type-setting functions:

* `castAsBigint(..)`
* `castAsBool(..)`
* `castAsDate(..)`
* `castAsDateTime(..)`
* `castAsDecimal(..)`
* `castAsDouble(..)`
* `castAsFloat(..)`
* `castAsInt(..)`
* `castAsLong(..)`
* `castAsOffsetDateTime(..)`

NOTE: Some "cast" transformations may be inefficient, performed via an intermediate conversion to Strings. Others
may be outright invalid (e.g. `castAsInt('abc')`). In those cases, you will need to provide your own explicit
columnset transforming operation.

==== String Functions
* `concat(..)`
* `endsWith(..)`
* `matches(..)`
* `split(..)`
* `startsWith(..)`
* `substr(..)`
* `trim(..)`

==== Numeric Functions
...

==== Date and Time Functions
...

==== Inline Conditions
* `ifExp(..)`
* `ifNull(..)`

==== Other Functions
* `rowNum()`
* `shift(..)`

==== Aggregating Functions
...
