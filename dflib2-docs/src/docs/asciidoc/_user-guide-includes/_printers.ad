[#printers]
== Printers

When doing data exploration and running data pipelines, it is important to be able to visualize data at every step.
More advanced forms of visualization include charts and diagrams. But the simplest thing you can do is printing
data to the console. Both `DataFrame` and `Series` implement `toString()` method, that will print their contents
as a single line, truncating large data sets in the process, which is good for debugging applications running on a
server.

A _tabular_ printer produces a more human-friendly form of output. Here is how to use the default tabular printer:
[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/PrintersTest.java[tags=printDataFrame_Tabular]
----
It prints displaying at most 10 rows, truncating the rest. The same goes for columns and cell values. At most 100 columns
are displayed, and values longer than 50 chars are truncated. (In the example below, we only have 3 columns and pretty
short values, so only row truncation is visible).

----
col1 col2 col3
---- ---- ----
0 3334 6668
1 3335 6669
2 3336 6670
3 3337 6671
4 3338 6672
...
3329 6663 9997
3330 6664 9998
3331 6665 9999
3332 6666    0
3333 6667    0
3334 rows x 3 columns
----
You can change the truncation parameters by creating your own printer:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/PrintersTest.java[tags=printDataFrame_Tabular_Custom]
----

<1> Create a printer that displays at most 3 rows, 3 columns and up to 3 characters in each cell.

----
c.. c.. c..
--- --- ---
  0 3.. 6..
  1 3.. 6..
...
3.. 6..   0
3334 rows x 3 columns
----

NOTE: If you are using <<jupyter, Jupyter Notebook>>, all the printers are already setup for you. So if the last
statement in a Jupyter cell is a `DataFrame` or a `Series`, it will be printed as a table in the notebook.