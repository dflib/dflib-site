[#stack]
== Stack

"Stack" is an operation that is a logical opposite of <<pivot>> (though some details are different). Taking a
`DataFrame` of any shape, it produces a "long" 3-column `DataFrame` with "row", "column" and "value" columns, that stores
each original value in a separate row. Such data representation is useful in certain data analysis scenarios.

Here is an example. Given a salary report from the previous chapter:
----
name             2025-01 2025-02
---------------- ------- -------
Jerry Cosin       120000  122000
Juliana Walewski   80000    null
Joan O'Hara        95000   95000
----
We can "stack" it, producing the long result:

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/StackTest.java[tags=stack]
----

----
row column  value
--- ------- ----------------
  0 name    Jerry Cosin
  1 name    Juliana Walewski
  2 name    Joan O'Hara
  0 2025-01 120000
  1 2025-01 80000
  2 2025-01 95000
  0 2025-02 122000
  2 2025-02 95000
----

Here "row" contains value positions in the original row, "column" - original column labels, and "value" -
the values themselves for a given row and column. Note that null values are excluded from the result. To include them,
use a different flavor of "stack":

[source,java,indent=0]
----
include::../../../test/java/org/dflib/docs/StackTest.java[tags=stack-nulls]
----

----
row column  value
--- ------- ----------------
  0 name    Jerry Cosin
  1 name    Juliana Walewski
  2 name    Joan O'Hara
  0 2025-01 120000
  1 2025-01 80000
  2 2025-01 95000
  0 2025-02 122000
  1 2025-02 null
  2 2025-02 95000
----
